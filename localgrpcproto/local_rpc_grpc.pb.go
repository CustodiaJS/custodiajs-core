// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: protobuff/local_rpc.proto

package localgrpcproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CLIService_WelcomeClient_FullMethodName = "/localgrpcproto.CLIService/WelcomeClient"
	CLIService_ListVMs_FullMethodName       = "/localgrpcproto.CLIService/ListVMs"
	CLIService_GetVMDetails_FullMethodName  = "/localgrpcproto.CLIService/GetVMDetails"
)

// CLIServiceClient is the client API for CLIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CLIServiceClient interface {
	// Wird verwendet damit ein Client seine Sitzungsdaten angeben kann
	WelcomeClient(ctx context.Context, in *ClientWelcomeRequest, opts ...grpc.CallOption) (*ClientWelcomeResponse, error)
	// Ruft eine Liste, aller Verfügabren VM's ab
	ListVMs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VmListResponse, error)
	// Ruft alle Details einer VM ab
	GetVMDetails(ctx context.Context, in *VmDetailsParms, opts ...grpc.CallOption) (*VmDetailsResponse, error)
}

type cLIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCLIServiceClient(cc grpc.ClientConnInterface) CLIServiceClient {
	return &cLIServiceClient{cc}
}

func (c *cLIServiceClient) WelcomeClient(ctx context.Context, in *ClientWelcomeRequest, opts ...grpc.CallOption) (*ClientWelcomeResponse, error) {
	out := new(ClientWelcomeResponse)
	err := c.cc.Invoke(ctx, CLIService_WelcomeClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIServiceClient) ListVMs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VmListResponse, error) {
	out := new(VmListResponse)
	err := c.cc.Invoke(ctx, CLIService_ListVMs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIServiceClient) GetVMDetails(ctx context.Context, in *VmDetailsParms, opts ...grpc.CallOption) (*VmDetailsResponse, error) {
	out := new(VmDetailsResponse)
	err := c.cc.Invoke(ctx, CLIService_GetVMDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CLIServiceServer is the server API for CLIService service.
// All implementations must embed UnimplementedCLIServiceServer
// for forward compatibility
type CLIServiceServer interface {
	// Wird verwendet damit ein Client seine Sitzungsdaten angeben kann
	WelcomeClient(context.Context, *ClientWelcomeRequest) (*ClientWelcomeResponse, error)
	// Ruft eine Liste, aller Verfügabren VM's ab
	ListVMs(context.Context, *emptypb.Empty) (*VmListResponse, error)
	// Ruft alle Details einer VM ab
	GetVMDetails(context.Context, *VmDetailsParms) (*VmDetailsResponse, error)
	mustEmbedUnimplementedCLIServiceServer()
}

// UnimplementedCLIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCLIServiceServer struct {
}

func (UnimplementedCLIServiceServer) WelcomeClient(context.Context, *ClientWelcomeRequest) (*ClientWelcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WelcomeClient not implemented")
}
func (UnimplementedCLIServiceServer) ListVMs(context.Context, *emptypb.Empty) (*VmListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMs not implemented")
}
func (UnimplementedCLIServiceServer) GetVMDetails(context.Context, *VmDetailsParms) (*VmDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMDetails not implemented")
}
func (UnimplementedCLIServiceServer) mustEmbedUnimplementedCLIServiceServer() {}

// UnsafeCLIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CLIServiceServer will
// result in compilation errors.
type UnsafeCLIServiceServer interface {
	mustEmbedUnimplementedCLIServiceServer()
}

func RegisterCLIServiceServer(s grpc.ServiceRegistrar, srv CLIServiceServer) {
	s.RegisterService(&CLIService_ServiceDesc, srv)
}

func _CLIService_WelcomeClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientWelcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServiceServer).WelcomeClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLIService_WelcomeClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServiceServer).WelcomeClient(ctx, req.(*ClientWelcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLIService_ListVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServiceServer).ListVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLIService_ListVMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServiceServer).ListVMs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLIService_GetVMDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmDetailsParms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServiceServer).GetVMDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLIService_GetVMDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServiceServer).GetVMDetails(ctx, req.(*VmDetailsParms))
	}
	return interceptor(ctx, in, info, handler)
}

// CLIService_ServiceDesc is the grpc.ServiceDesc for CLIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CLIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localgrpcproto.CLIService",
	HandlerType: (*CLIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WelcomeClient",
			Handler:    _CLIService_WelcomeClient_Handler,
		},
		{
			MethodName: "ListVMs",
			Handler:    _CLIService_ListVMs_Handler,
		},
		{
			MethodName: "GetVMDetails",
			Handler:    _CLIService_GetVMDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuff/local_rpc.proto",
}
