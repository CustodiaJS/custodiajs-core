// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: local_rpc.proto

package localgrpcproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocalhostAPIService_SpawnProcess_FullMethodName                    = "/localgrpcproto.LocalhostAPIService/SpawnProcess"
	LocalhostAPIService_RegisterAndLinkVmInstanceStream_FullMethodName = "/localgrpcproto.LocalhostAPIService/RegisterAndLinkVmInstanceStream"
)

// LocalhostAPIServiceClient is the client API for LocalhostAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalhostAPIServiceClient interface {
	// Wird verwendet um einen Prozess zu Registrieren und offen zu halten
	SpawnProcess(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProcessTransport, ProcessTransport], error)
	// Wird verwendet um eine VM Instantz zu registrieren
	RegisterAndLinkVmInstanceStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VmInstanceTransport, VmInstanceTransport], error)
}

type localhostAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalhostAPIServiceClient(cc grpc.ClientConnInterface) LocalhostAPIServiceClient {
	return &localhostAPIServiceClient{cc}
}

func (c *localhostAPIServiceClient) SpawnProcess(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProcessTransport, ProcessTransport], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LocalhostAPIService_ServiceDesc.Streams[0], LocalhostAPIService_SpawnProcess_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProcessTransport, ProcessTransport]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LocalhostAPIService_SpawnProcessClient = grpc.BidiStreamingClient[ProcessTransport, ProcessTransport]

func (c *localhostAPIServiceClient) RegisterAndLinkVmInstanceStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VmInstanceTransport, VmInstanceTransport], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LocalhostAPIService_ServiceDesc.Streams[1], LocalhostAPIService_RegisterAndLinkVmInstanceStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VmInstanceTransport, VmInstanceTransport]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LocalhostAPIService_RegisterAndLinkVmInstanceStreamClient = grpc.BidiStreamingClient[VmInstanceTransport, VmInstanceTransport]

// LocalhostAPIServiceServer is the server API for LocalhostAPIService service.
// All implementations must embed UnimplementedLocalhostAPIServiceServer
// for forward compatibility.
type LocalhostAPIServiceServer interface {
	// Wird verwendet um einen Prozess zu Registrieren und offen zu halten
	SpawnProcess(grpc.BidiStreamingServer[ProcessTransport, ProcessTransport]) error
	// Wird verwendet um eine VM Instantz zu registrieren
	RegisterAndLinkVmInstanceStream(grpc.BidiStreamingServer[VmInstanceTransport, VmInstanceTransport]) error
	mustEmbedUnimplementedLocalhostAPIServiceServer()
}

// UnimplementedLocalhostAPIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocalhostAPIServiceServer struct{}

func (UnimplementedLocalhostAPIServiceServer) SpawnProcess(grpc.BidiStreamingServer[ProcessTransport, ProcessTransport]) error {
	return status.Errorf(codes.Unimplemented, "method SpawnProcess not implemented")
}
func (UnimplementedLocalhostAPIServiceServer) RegisterAndLinkVmInstanceStream(grpc.BidiStreamingServer[VmInstanceTransport, VmInstanceTransport]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterAndLinkVmInstanceStream not implemented")
}
func (UnimplementedLocalhostAPIServiceServer) mustEmbedUnimplementedLocalhostAPIServiceServer() {}
func (UnimplementedLocalhostAPIServiceServer) testEmbeddedByValue()                             {}

// UnsafeLocalhostAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalhostAPIServiceServer will
// result in compilation errors.
type UnsafeLocalhostAPIServiceServer interface {
	mustEmbedUnimplementedLocalhostAPIServiceServer()
}

func RegisterLocalhostAPIServiceServer(s grpc.ServiceRegistrar, srv LocalhostAPIServiceServer) {
	// If the following call pancis, it indicates UnimplementedLocalhostAPIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocalhostAPIService_ServiceDesc, srv)
}

func _LocalhostAPIService_SpawnProcess_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalhostAPIServiceServer).SpawnProcess(&grpc.GenericServerStream[ProcessTransport, ProcessTransport]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LocalhostAPIService_SpawnProcessServer = grpc.BidiStreamingServer[ProcessTransport, ProcessTransport]

func _LocalhostAPIService_RegisterAndLinkVmInstanceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalhostAPIServiceServer).RegisterAndLinkVmInstanceStream(&grpc.GenericServerStream[VmInstanceTransport, VmInstanceTransport]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LocalhostAPIService_RegisterAndLinkVmInstanceStreamServer = grpc.BidiStreamingServer[VmInstanceTransport, VmInstanceTransport]

// LocalhostAPIService_ServiceDesc is the grpc.ServiceDesc for LocalhostAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalhostAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localgrpcproto.LocalhostAPIService",
	HandlerType: (*LocalhostAPIServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SpawnProcess",
			Handler:       _LocalhostAPIService_SpawnProcess_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RegisterAndLinkVmInstanceStream",
			Handler:       _LocalhostAPIService_RegisterAndLinkVmInstanceStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "local_rpc.proto",
}
