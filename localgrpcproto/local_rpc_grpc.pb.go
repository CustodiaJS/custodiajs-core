// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: protobuff/local_rpc.proto

package localgrpcproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocalhostAPIService_WelcomeClient_FullMethodName = "/localgrpcproto.LocalhostAPIService/WelcomeClient"
	LocalhostAPIService_ListVMs_FullMethodName       = "/localgrpcproto.LocalhostAPIService/ListVMs"
	LocalhostAPIService_GetVMDetails_FullMethodName  = "/localgrpcproto.LocalhostAPIService/GetVMDetails"
)

// LocalhostAPIServiceClient is the client API for LocalhostAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalhostAPIServiceClient interface {
	// Wird verwendet damit ein Client seine Sitzungsdaten angeben kann
	WelcomeClient(ctx context.Context, in *ClientWelcomeRequest, opts ...grpc.CallOption) (*ClientWelcomeResponse, error)
	// Ruft eine Liste, aller Verfügabren VM's ab
	ListVMs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VmListResponse, error)
	// Ruft alle Details einer VM ab
	GetVMDetails(ctx context.Context, in *VmDetailsParms, opts ...grpc.CallOption) (*VmDetailsResponse, error)
}

type localhostAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalhostAPIServiceClient(cc grpc.ClientConnInterface) LocalhostAPIServiceClient {
	return &localhostAPIServiceClient{cc}
}

func (c *localhostAPIServiceClient) WelcomeClient(ctx context.Context, in *ClientWelcomeRequest, opts ...grpc.CallOption) (*ClientWelcomeResponse, error) {
	out := new(ClientWelcomeResponse)
	err := c.cc.Invoke(ctx, LocalhostAPIService_WelcomeClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localhostAPIServiceClient) ListVMs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VmListResponse, error) {
	out := new(VmListResponse)
	err := c.cc.Invoke(ctx, LocalhostAPIService_ListVMs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localhostAPIServiceClient) GetVMDetails(ctx context.Context, in *VmDetailsParms, opts ...grpc.CallOption) (*VmDetailsResponse, error) {
	out := new(VmDetailsResponse)
	err := c.cc.Invoke(ctx, LocalhostAPIService_GetVMDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalhostAPIServiceServer is the server API for LocalhostAPIService service.
// All implementations must embed UnimplementedLocalhostAPIServiceServer
// for forward compatibility
type LocalhostAPIServiceServer interface {
	// Wird verwendet damit ein Client seine Sitzungsdaten angeben kann
	WelcomeClient(context.Context, *ClientWelcomeRequest) (*ClientWelcomeResponse, error)
	// Ruft eine Liste, aller Verfügabren VM's ab
	ListVMs(context.Context, *emptypb.Empty) (*VmListResponse, error)
	// Ruft alle Details einer VM ab
	GetVMDetails(context.Context, *VmDetailsParms) (*VmDetailsResponse, error)
	mustEmbedUnimplementedLocalhostAPIServiceServer()
}

// UnimplementedLocalhostAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocalhostAPIServiceServer struct {
}

func (UnimplementedLocalhostAPIServiceServer) WelcomeClient(context.Context, *ClientWelcomeRequest) (*ClientWelcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WelcomeClient not implemented")
}
func (UnimplementedLocalhostAPIServiceServer) ListVMs(context.Context, *emptypb.Empty) (*VmListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMs not implemented")
}
func (UnimplementedLocalhostAPIServiceServer) GetVMDetails(context.Context, *VmDetailsParms) (*VmDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMDetails not implemented")
}
func (UnimplementedLocalhostAPIServiceServer) mustEmbedUnimplementedLocalhostAPIServiceServer() {}

// UnsafeLocalhostAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalhostAPIServiceServer will
// result in compilation errors.
type UnsafeLocalhostAPIServiceServer interface {
	mustEmbedUnimplementedLocalhostAPIServiceServer()
}

func RegisterLocalhostAPIServiceServer(s grpc.ServiceRegistrar, srv LocalhostAPIServiceServer) {
	s.RegisterService(&LocalhostAPIService_ServiceDesc, srv)
}

func _LocalhostAPIService_WelcomeClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientWelcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalhostAPIServiceServer).WelcomeClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalhostAPIService_WelcomeClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalhostAPIServiceServer).WelcomeClient(ctx, req.(*ClientWelcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalhostAPIService_ListVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalhostAPIServiceServer).ListVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalhostAPIService_ListVMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalhostAPIServiceServer).ListVMs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalhostAPIService_GetVMDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmDetailsParms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalhostAPIServiceServer).GetVMDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalhostAPIService_GetVMDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalhostAPIServiceServer).GetVMDetails(ctx, req.(*VmDetailsParms))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalhostAPIService_ServiceDesc is the grpc.ServiceDesc for LocalhostAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalhostAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localgrpcproto.LocalhostAPIService",
	HandlerType: (*LocalhostAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WelcomeClient",
			Handler:    _LocalhostAPIService_WelcomeClient_Handler,
		},
		{
			MethodName: "ListVMs",
			Handler:    _LocalhostAPIService_ListVMs_Handler,
		},
		{
			MethodName: "GetVMDetails",
			Handler:    _LocalhostAPIService_GetVMDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuff/local_rpc.proto",
}
